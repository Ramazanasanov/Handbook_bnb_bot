import os, sys, traceback, logging, asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(level=logging.DEBUG)  # –º–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤

print(">>> bot_diag.py —Å—Ç–∞—Ä—Ç—É–µ—Ç", flush=True)

try:
    load_dotenv(".env")
    TOKEN = os.getenv("BOT_TOKEN")
    print("TOKEN_PREFIX:", (TOKEN or "")[:15], flush=True)
    if not TOKEN or ":" not in TOKEN:
        raise RuntimeError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BOT_TOKEN (–ø—É—Å—Ç–æ–π –∏–ª–∏ –æ–±—Ä–µ–∑–∞–Ω)")
except Exception as e:
    print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env:", e, flush=True)
    sys.exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. /start –æ–∫")

def run():
    print(">>> –°–æ–∑–¥–∞—é Application...", flush=True)
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é run_polling() ...", flush=True)
    try:
        app.run_polling()
        print("<<< run_polling() –≤–µ—Ä–Ω—É–ª–∞—Å—å (–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)", flush=True)
    except Exception as e:
        print("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ run_polling:", repr(e), flush=True)
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    run()
